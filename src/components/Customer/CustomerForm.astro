---
import Form from "@components/ui/Forms/Form.astro";
import FormInput from "@components/ui/Forms/FormInput.astro";
import FormSelect from "@components/ui/Forms/FormSelect.astro";
import SelectOption from "@components/ui/Forms/SelectOption.astro";
import BackBtn from "@components/ui/Buttons/BackBtn.astro";
import { convertCustomerDataToJSON } from "@functions/ConvertCustomerDataToJson";
import { convertStatusDataToJSON } from "@functions/ConvertCustomerDataToJson";
import { convertAdressesDataToJSON } from "@functions/ConvertCustomerDataToJson";
import { turso } from "src/turso";

const path = Astro.url.pathname.replace(/\/$/, ""); // Elimina el "/" al final si existe.
const previousPath = path.substring(0, path.lastIndexOf("/")) || "/";

interface Props {
  selectedCustomer?: any;
}

const { selectedCustomer } = Astro.props;

let customerID = "";
let addressID = "";
let result;
let resultStatus;
let StatusData;
let addressesData;
let resultAddresses;

StatusData = await turso.execute(`
  SELECT * 
  FROM Status 
  WHERE statusName IN ('Alta')
`);

addressesData = await turso.execute('SELECT * FROM Addresses');

const data = await turso.execute("SELECT * FROM Customers"); // Obtener datos de clientes

if (!selectedCustomer) {
  result = convertCustomerDataToJSON(data.toJSON());
  resultStatus = convertStatusDataToJSON(StatusData.toJSON());
  resultAddresses = convertAdressesDataToJSON(addressesData.toJSON());
} else {
  result = convertCustomerDataToJSON(data.toJSON()).filter((c) => c.customerID !== selectedCustomer.customerID);
  resultStatus = convertStatusDataToJSON(StatusData.toJSON()).filter((s) => s.statusID !== selectedCustomer.statusID);
  resultAddresses = convertAdressesDataToJSON(addressesData.toJSON()).filter((a) => a.addressID !== selectedCustomer.addressID);
}

---

<Form title="Alta Clientes">
  {
    !selectedCustomer
    ? 
    <div class="grid grid-cols-2 gap-4">
      
      <!-- Primera columna -->
      <div class="flex flex-col">
        
        <!-- Id Cliente -->
        <FormInput type="number" name="customerID" title="ID Cliente" placeholder={customerID} isDisabled/>
        
        <!-- Nombre -->
        <FormInput type="text" name="firstName" title="Nombre" placeholder="Nombre" isRequired/>

        <!-- Apellido Paterno -->
        <FormInput type="text" name="paternalLastName" title="Apellido Paterno" placeholder="Apellido Paterno" isRequired/>

        <!-- Apellido Materno -->
        <FormInput type="text" name="maternalLastName" title="Apellido Materno" placeholder="Apellido Materno" isRequired/>

        <!-- CURP -->
        <FormInput type="text" name="CURP" title="CURP" placeholder="CURP"  isRequired/>

        <!-- Número de teléfono -->
        <FormInput type="text" name="phoneNumber" title="Número de Teléfono" placeholder="Número de Teléfono" isRequired/>

        <!-- Correo electrónico -->
        <FormInput type="email" name="Email" title="Correo Electrónico" placeholder="Email" isRequired/>
        
        <!-- RFC -->
        <FormInput type="text" name="RFC" title="RFC" placeholder="RFC" isRequired/>
        
      </div>

      <!-- Segunda columna -->
      <div class="flex flex-col">

        <!-- Id Dirección -->
        <FormInput type="number" name="addressID" title="ID Dirección"  placeholder={addressID} isRequired/>

        <!-- Dirección -->
        <FormInput type="text" name="street" title="Calle" placeholder="Calle" isRequired/>
        <FormInput type="text" name="city" title="Ciudad" placeholder="Ciudad" isRequired/>

        <!-- Código Postal -->
        <FormInput type="text" name="postalCode" title="Código Postal" placeholder="Código Postal" isRequired/>
        
        <!-- Número Exterior -->
        <FormInput type="text" name="outsideNumb" title="Número Exterior" placeholder="Número Exterior" isRequired/>

        <!-- Estado -->
        <FormInput type="text" name="neighborhood " title="Colonia" placeholder="Colonia" isRequired/>
        <FormInput type="text" name="state" title="Estado" placeholder="Estado" isRequired/>
        <FormInput type="text" name="country" title="País" placeholder="País" isRequired/>

        <!-- Estado -->
        <FormSelect name="statusID" title="Estado" isRequired>
          <SelectOption value="" isSelected> -- Selecciona -- </SelectOption>
          {
            resultStatus?.map((w) => (
              <SelectOption value={w.statusID?.toString() ?? ''}>{w.statusName}</SelectOption>
            ))
          }
        </FormSelect>

      </div>
    </div>

    <slot/>
  :
  
    <!-- Editar cliente -->
    <div class="grid grid-cols-2 gap-4">
      
      <!-- Primera columna -->
      <div class="flex flex-col">
        
        <!-- Id Cliente -->
        <FormInput type="number" name="customerID" title="ID Cliente" placeholder="ID Cliente" value={selectedCustomer.customerID} isDisabled/>

        <!-- Nombre -->
        <FormInput type="text" name="firstName" title="Nombre" placeholder="Nombre" value={selectedCustomer.firstName} />

        <!-- Apellido Paterno -->
        <FormInput type="text" name="paternalLastName" title="Apellido Paterno" placeholder="Apellido Paterno" value={selectedCustomer.paternalLastName} />

        <!-- Apellido Materno -->
        <FormInput type="text" name="maternalLastName" title="Apellido Materno" placeholder="Apellido Materno" value={selectedCustomer.maternalLastName} />

        <!-- CURP -->
        <FormInput type="text" name="CURP" title="CURP" placeholder="CURP" value={selectedCustomer.CURP} isRequired/>
        
        <!-- Número de teléfono -->
        <FormInput type="text" name="phoneNumber" title="Número de Teléfono" placeholder="Número de Teléfono" value={selectedCustomer.phoneNumber} />

        <!-- Correo electrónico -->
        <FormInput type="email" name="Email" title="Correo Electrónico" placeholder="Email" value={selectedCustomer.Email} />

        <!-- RFC -->
        <FormInput type="text" name="RFC" title="RFC" placeholder="RFC" value={selectedCustomer.RFC} />

      </div>

      <!-- Segunda columna -->
      <div class="flex flex-col">

        <!-- Id Dirección -->
        <FormInput type="number" name="addressID" title="ID Dirección" placeholder={addressID} value={selectedCustomer.addressID} isRequired/>
        
        <!-- Dirección -->
        <FormInput type="text" name="street" title="Calle" placeholder="Calle" value={selectedCustomer.street} />
        <FormInput type="text" name="city" title="Ciudad" placeholder="Ciudad" value={selectedCustomer.city} />

        <!-- Código Postal -->
        <FormInput type="text" name="postalCode" title="Código Postal" placeholder="Código Postal" value={selectedCustomer.postalCode} />
        
        <!-- Número Exterior -->
        <FormInput type="text" name="outsideNumb" title="Número Exterior" placeholder="Número Exterior" value={selectedCustomer.outsideNumb} />

        <!-- Estado -->
        <FormInput type="text" name="neighborhood" title="Colonia" placeholder="Colonia" value={selectedCustomer.neighborhood } />
        <FormInput type="text" name="state" title="Estado" placeholder="Estado" value={selectedCustomer.state} />
        <FormInput type="text" name="country" title="País" placeholder="País" value={selectedCustomer.country} />

        <!-- Estado -->
        <FormSelect name="statusID" title="Estado" isRequired>
          <SelectOption value="" isSelected> -- Selecciona -- </SelectOption>
          {
            resultStatus?.map((w) => (
              <SelectOption value={w.statusID?.toString() ?? ''}>{w.statusName}</SelectOption>
            ))
          }
        </FormSelect>

      </div>
    </div>
    
    <slot/>
  }
</Form>
