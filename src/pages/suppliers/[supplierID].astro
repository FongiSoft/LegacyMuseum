---
import BackBtn from "@components/ui/Buttons/BackBtn.astro";
import Layout from "src/layouts/Layout.astro";
import SupplierForm from "@components/Supplier/SupplierForm.astro";
import { turso } from "src/turso";
import SubmitBtn from "@components/ui/Buttons/SubmitBtn.astro";
import { convertSuppliersDataToJSON } from "@functions/ConvertSuppliersDataToJSON";

const { supplierID } = Astro.params;

const rows = await turso.execute(`
  SELECT s.*, a.*, l.*
  FROM Suppliers s
  JOIN Addresses a ON s.addressID = a.addressID
  JOIN LegalEntities l ON s.legalEntityID = l.legalEntityID
  WHERE s.supplierID = ${supplierID}
`);

const result = convertSuppliersDataToJSON(rows.toJSON());

if (Astro.request.method === 'POST') {
  // Parsear los datos del formulario
  const formData = await Astro.request.formData();

  const supplierID = formData.get('supplierID');
  const legalEntityID = formData.get('legalEntityID');
  const phoneNumber = formData.get('phoneNumber');
  const email = formData.get('email');

  // Datos de la dirección
  const street = formData.get('street');
  const neighborhood = formData.get('neighborhood'); // Nuevo campo
  const city = formData.get('city');
  const state = formData.get('state'); // Nuevo campo
  const country = formData.get('country'); // Nuevo campo
  const postalCode = formData.get('postalCode');
  const outsideNumb = formData.get('outsideNumb');
  const statusID = formData.get('statusID');
  const addressID = formData.get('addressID');

  
  let addressUpdateFields = [];
  if (street) addressUpdateFields.push(`street = '${street}'`);
  if (neighborhood) addressUpdateFields.push(`neighborhood = '${neighborhood}'`);
  if (city) addressUpdateFields.push(`city = '${city}'`);
  if (state) addressUpdateFields.push(`state = '${state}'`);
  if (country) addressUpdateFields.push(`country = '${country}'`);
  if (postalCode) addressUpdateFields.push(`postalCode = '${postalCode}'`);
  if (outsideNumb) addressUpdateFields.push(`outsideNumb = '${outsideNumb}'`);

  // Actualizar la dirección si se han proporcionado datos
  if (addressUpdateFields.length > 0) {
    const addressUpdateQuery = `
      UPDATE Addresses
      SET ${addressUpdateFields.join(', ')}
      WHERE addressID = ${addressID}
    `;
    await turso.execute(addressUpdateQuery);
  }

  let updateFields = [];
  if (legalEntityID) updateFields.push(`legalEntityID = '${legalEntityID}'`);
  if (phoneNumber) updateFields.push(`phoneNumber = ${phoneNumber}`);
  if (email) updateFields.push(`email = ${email}`);
  if (statusID) updateFields.push(`statusID = ${statusID}`);

  if (updateFields.length > 0) {
    const updateQuery = `
      UPDATE Suppliers
      SET ${updateFields.join(', ')}
      WHERE supplierID = ${supplierID}
    `;
    await turso.execute(updateQuery);
  }

  return Astro.redirect('/suppliers');
}
---

<Layout title="Editar">
  <SupplierForm selectedSupplier={result[0]}>
    <div class="flex justify-end max-w-full mx-auto px-8">
      <BackBtn />
      <SubmitBtn>
        Update
      </SubmitBtn>
    </div>
  </SupplierForm>
</Layout>
