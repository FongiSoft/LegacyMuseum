---
import Form from "@components/ui/Forms/Form.astro";
import FormInput from "@components/ui/Forms/FormInput.astro";
import SubmitBtn from "@components/ui/Buttons/SubmitBtn.astro";
import { convertUserDataToJSON } from "@functions/ConvertUserDataToJson";
import { decryptPasswrd } from "@functions/registerUser";
import type { InputType } from "@customTypes/InputType";
import { turso } from "src/turso";
import LayoutWTOS from "src/layouts/LayoutWTOS.astro";

export interface Inputs {
  name: string;
  label: string;
  type: InputType;
  isRequired: boolean;
  placeholder: string;
}

const session = Astro.cookies.get("userSes");

if (session) {
  Astro.cookies.delete("userSes");
  return Astro.redirect("/");
}

if (Astro.request.method === "POST") {
  // Analizar datos de formulario
  const formData = await Astro.request.formData();

  const employeeID = formData.get("employeeID");
  const passw = formData.get("passw");
  
  if (typeof passw === "string" && typeof employeeID === "string") {  
    try {
      const selection = await turso.execute(
        `SELECT * FROM Employees WHERE employeeID = ${employeeID}`
      );
      const userSession = convertUserDataToJSON(selection.toJSON());

      let decUserPasswrd = decryptPasswrd(userSession[0].passwrd);

      let userInfo = {
        id: userSession[0].employeeID,
				name: userSession[0].name,
				lastName: userSession[0].paternalSurname
      };

      if (decUserPasswrd === passw) {
        Astro.cookies.set("userSes", userInfo);

        return Astro.redirect("/");
      }
    } catch (e: any) {
      console.error(
        `No se puede logear un usuario con nombre ${employeeID}\n\n${e.message}`
      );
    }
  }
  return Astro.redirect("/");
}

const inputs: Inputs[] = [
  {
    name: "employeeID",
    label: "# User",
    type: "number",
    isRequired: true,
    placeholder: "982472834824",
  },
  {
    name: "passw",
    label: "Password",
    type: "password",
    isRequired: true,
    placeholder: "123456",
  },
];
---

<LayoutWTOS title="Log into you Account">
  <div class="flex items-center justify-center flex-col mt-36 max-w-screen-xl mx-auto px-4 md:px-8 md:flex">
    <Form title="Log In">
      {
        inputs.map((inp) => (
          <FormInput
            name={inp.name}
            type={inp.type}
            isRequired
            placeholder={inp.placeholder}
          >
            {inp.label}
          </FormInput>
        ))
      }
      <div class="flex justify-center items-center min-w-full mt-2">
        <SubmitBtn> Login </SubmitBtn>
      </div>
    </Form>
    <div class="dark:text-white">
      ¿No tienes una cuenta? <a href="/register" class="text-LegacyBlue-600">¡registrate!</a>
    </div>
  </div>
</LayoutWTOS>
