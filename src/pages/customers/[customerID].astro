---
import BackBtn from "@components/ui/Buttons/BackBtn.astro";
import Layout from "src/layouts/Layout.astro";
import CustomerForm from "@components/Customer/CustomerForm.astro";
import { turso } from "src/turso";
import { convertCustomerDataToJSON } from "@functions/ConvertCustomerDataToJson"; // Si necesitas convertir los datos a JSON
import SubmitBtn from "@components/ui/Buttons/SubmitBtn.astro";

const { customerID } = Astro.params;

// Obtener los datos del cliente y la dirección asociada
const rows = await turso.execute(`
  SELECT c.*, a.*
  FROM Customers c
  JOIN Addresses a ON c.addressID = a.addressID
  WHERE c.customerID = ${customerID}
`);

const result = convertCustomerDataToJSON(rows.toJSON());

if (Astro.request.method === 'POST') {
  // Parsear los datos del formulario
  const formData = await Astro.request.formData();

  const firstName = formData.get('firstName');
  const paternalLastName = formData.get('paternalLastName');
  const maternalLastName = formData.get('maternalLastName');
  const CURP = formData.get('CURP');
  const phoneNumber = formData.get('phoneNumber');
  const Email = formData.get('Email');
  const RFC = formData.get('RFC');
  const statusID = formData.get('statusID');

  // Datos de la dirección
  const street = formData.get('street');
  const neighborhood = formData.get('neighborhood');
  const city = formData.get('city');
  const state = formData.get('state');
  const country = formData.get('country');
  const postalCode = formData.get('postalCode');
  const outsideNumb = formData.get('outsideNumb');
  const addressID = formData.get('addressID'); // Se debe recibir el addressID para actualizar la dirección

  // Construir la consulta SQL dinámica para la dirección
  let addressUpdateFields = [];
  if (street) addressUpdateFields.push(`street = '${street}'`);
  if (neighborhood) addressUpdateFields.push(`neighborhood = '${neighborhood}'`);
  if (city) addressUpdateFields.push(`city = '${city}'`);
  if (state) addressUpdateFields.push(`state = '${state}'`);
  if (country) addressUpdateFields.push(`country = '${country}'`);
  if (postalCode) addressUpdateFields.push(`postalCode = '${postalCode}'`);
  if (outsideNumb) addressUpdateFields.push(`outsideNumb = '${outsideNumb}'`);

  // Actualizar la dirección si se han proporcionado datos
  if (addressUpdateFields.length > 0) {
    const addressUpdateQuery = `
      UPDATE Addresses
      SET ${addressUpdateFields.join(', ')}
      WHERE addressID = ${addressID}
    `;
    await turso.execute(addressUpdateQuery);
  }

  // Construir la consulta SQL dinámica para el cliente
  let customerUpdateFields = [];
  if (firstName) customerUpdateFields.push(`firstName = '${firstName}'`);
  if (paternalLastName) customerUpdateFields.push(`paternalLastName = '${paternalLastName}'`);
  if (maternalLastName) customerUpdateFields.push(`maternalLastName = '${maternalLastName}'`);
  if (CURP) customerUpdateFields.push(`CURP = '${CURP}'`);
  if (phoneNumber) customerUpdateFields.push(`phoneNumber = '${phoneNumber}'`);
  if (Email) customerUpdateFields.push(`Email = '${Email}'`);
  if (RFC) customerUpdateFields.push(`RFC = '${RFC}'`);
  if (statusID) customerUpdateFields.push(`statusID = ${statusID}`);

  // Actualizar el cliente si se han proporcionado datos
  if (customerUpdateFields.length > 0) {
    const customerUpdateQuery = `
      UPDATE Customers
      SET ${customerUpdateFields.join(', ')}
      WHERE customerID = ${customerID}
    `;
    await turso.execute(customerUpdateQuery);
  }

  return Astro.redirect('/customers');
}
---

<Layout title="Editar Cliente">
  <CustomerForm selectedCustomer={result[0]}>
    <div class="flex justify-end max-w-full mx-auto px-8">
      <BackBtn />
      <SubmitBtn>
        Update
      </SubmitBtn>
    </div>
  </CustomerForm>
</Layout>
