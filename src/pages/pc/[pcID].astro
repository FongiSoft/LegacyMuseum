---
import BackBtn from "@components/ui/Buttons/BackBtn.astro";
import Layout from "../../layouts/Layout.astro";
import PcForm from "@components/Pc/PcForm.astro";
import SubmitBtn from "@components/ui/Buttons/SubmitBtn.astro";
import { db, eq, PC, Status, Area } from "astro:db";

const { pcID } = Astro.params;

// Asegurarse de que el id es del tipo correcto (UUID)
if (typeof pcID !== "string") {
  throw new Error("El id debe ser una cadena de texto");
}

const result = await db.select().from(PC)
  .where(eq(PC.id, Number(pcID)))
  .innerJoin(Status, eq(Status.id, PC.statusID))
  .innerJoin(Area, eq(Area.id, PC.areaID))

if (Astro.request.method === "POST") {
  // Parse form data
  const formData = await Astro.request.formData();

  const pcID = formData.get("pcID");
  const areaID = formData.get('areaID');
  const pcName = formData.get('pcName');
  const statusID = formData.get("statusID");

  if (typeof pcID === 'string' && typeof areaID === 'string' && typeof pcName === 'string'){
    if (String(result[0].PC.areaID) != areaID) {
      await db.update(PC).set({
        areaID: Number(areaID)
      })
      .where(eq(PC.id, Number(pcID)))
    }
    if (String(result[0].PC.name) != pcName) {
      await db.update(PC).set({
        name: pcName
      })
      .where(eq(PC.id, Number(pcID)))
    }
    if (String(result[0].PC.statusID) != statusID) {
      await db.update(PC).set({
        statusID: Number(statusID)
      })
      .where(eq(PC.id, Number(pcID)))
    };
  }

  return Astro.redirect("/pc");
}
---

<Layout title="Editar">
  <PcForm selectedPC={result[0]}>
    <div class="flex justify-end max-w-full mx-auto px-8">
      <BackBtn />
      <SubmitBtn> Update </SubmitBtn>
    </div>
  </PcForm>
</Layout>
